#!/usr/bin/env -S uv run --script
# /// script
# requires-python = ">=3.12"
# dependencies = [
# ]
# ///
"""
Script Requirements:
- As a user, I want to find all '.md' files in the '~/code/notes/df' directory.
- As a user, I want to identify the file whose name (excluding extension) is the highest integer value.
- As a user, I want to execute a command to open this most recent file with the 'code' executable located at '$HOME/.nix-profile/bin/code'.
- As a user, I want the script to run silently on success, but report errors to stderr if no files are found or the command fails.
"""

import subprocess
import sys
from pathlib import Path


def main():
    home = Path.home()
    code_executable = home / ".nix-profile/bin/code"
    notes_dir = home / "code/notes/df"

    if not notes_dir.exists():
        print(f"Error: Notes directory not found at {notes_dir}", file=sys.stderr)
        sys.exit(1)

    most_recent_file = None
    max_timestamp = -1

    try:
        for file_path in notes_dir.glob("*.md"):
            try:
                timestamp = int(file_path.stem)
                if timestamp > max_timestamp:
                    max_timestamp = timestamp
                    most_recent_file = file_path
            except ValueError:
                continue  # Ignore files with non-integer names

    except OSError as e:
        print(f"Error reading notes directory {notes_dir}: {e}", file=sys.stderr)
        sys.exit(1)

    if most_recent_file is None:
        print(f"Error: No valid note files found in {notes_dir}", file=sys.stderr)
        sys.exit(1)

    command = [str(code_executable), str(most_recent_file)]

    try:
        subprocess.run(
            command,
            check=True,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
        )
    except FileNotFoundError:
        print(f"Error: Command not found at {code_executable}", file=sys.stderr)
        sys.exit(1)
    except subprocess.CalledProcessError as e:
        print(f"Error executing command: {e}", file=sys.stderr)
        sys.exit(e.returncode)


if __name__ == "__main__":
    main()
