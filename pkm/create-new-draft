#!/usr/bin/env -S uv run --script
# /// script
# requires-python = ">=3.12"
# dependencies = [
# ]
# ///
"""
Script Requirements:
- As a user, I want to get the current timestamp in 'yymmddHHMMSS' format.
- As a user, I want to construct a file path for a new note in the '~/code/notes/df' directory.
- As a user, I want to create this new note file with '# ' as its initial content.
- As a user, I want to execute a command to open this new file with the 'code' executable located at '$HOME/.nix-profile/bin/code'.
- As a user, I want the script to run silently, printing no output on success but reporting errors to stderr.
"""

import subprocess
import sys
from datetime import datetime
from pathlib import Path


def main():
    timestamp_str = datetime.now().strftime("%y%m%d%H%M%S")

    home = Path.home()
    code_executable = home / ".nix-profile/bin/code"
    notes_dir = home / "code/notes/df"
    new_note_file = notes_dir / f"{timestamp_str}.md"

    try:
        notes_dir.mkdir(parents=True, exist_ok=True)
        with open(new_note_file, 'w') as f:
            f.write("# \n")
    except OSError as e:
        print(f"Error creating file {new_note_file}: {e}", file=sys.stderr)
        sys.exit(1)

    command = [str(code_executable), str(new_note_file)]

    try:
        subprocess.run(
            command,
            check=True,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
        )
    except FileNotFoundError:
        print(f"Error: Command not found at {code_executable}", file=sys.stderr)
        sys.exit(1)
    except subprocess.CalledProcessError as e:
        print(f"Error executing command: {e}", file=sys.stderr)
        sys.exit(e.returncode)


if __name__ == "__main__":
    main()
