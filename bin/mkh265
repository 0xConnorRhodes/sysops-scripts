#!/usr/bin/env bash

# Function to detect audio codec
get_audio_codec() {
    local input_file="$1"
    ffprobe -v quiet -select_streams a:0 -show_entries stream=codec_name -of csv=p=0 "$input_file" 2>/dev/null
}

# Function to convert a single file
convert_file() {
    local input_file="$1"
    local output_dir="$2"
    local reencode_opus="$3"

    if [ ! -f "$input_file" ]; then
        echo "Error: File '$input_file' not found"
        return 1
    fi

    # Get filename and extension
    filename=$(basename "$input_file")
    filename_without_ext="${filename%.*}"
    extension="${filename##*.}"

    # Create output path with same extension as input
    output_file="${output_dir}/${filename_without_ext}.${extension}"

    # Determine audio codec settings
    if [ "$reencode_opus" = "true" ]; then
        current_audio_codec=$(get_audio_codec "$input_file")
        if [ "$current_audio_codec" = "opus" ]; then
            audio_setting="-c:a copy"
            echo "Converting: $input_file -> $output_file (keeping existing Opus audio)"
        else
            audio_setting="-c:a libopus"
            echo "Converting: $input_file -> $output_file (reencoding audio to Opus)"
        fi
    else
        audio_setting="-c:a copy"
        echo "Converting: $input_file -> $output_file (copying audio)"
    fi

    ffmpeg -i "$input_file" -c:v libx265 $audio_setting "$output_file"
}

# Parse command line options
reencode_opus=false
positional_args=()

while [[ $# -gt 0 ]]; do
    case $1 in
        --opus)
            reencode_opus=true
            shift
            ;;
        -h|--help)
            echo "Usage: $0 [--opus] [input_file]"
            echo "  With no file argument: Converts all .mp4 and .mkv files in current directory"
            echo "  With one file argument: Converts the specified video file"
            echo "  --opus: Reencode audio to Opus (default: copy existing audio)"
            echo "  Converts video to H.265/HEVC"
            exit 0
            ;;
        *)
            positional_args+=("$1")
            shift
            ;;
    esac
done

# Restore positional parameters
set -- "${positional_args[@]}"

# Check if a file argument was provided (single file mode)
if [ $# -eq 1 ]; then
    input_file="$1"

    if [ ! -f "$input_file" ]; then
        echo "Error: File '$input_file' not found"
        exit 1
    fi

    # Get filename and extension for single file mode
    filename=$(basename "$input_file")
    filename_without_ext="${filename%.*}"
    extension="${filename##*.}"
    output_file="${filename_without_ext}.${extension}"

    if [[ "$(uname)" == "Darwin" ]]; then
        caffeinate -d &
        caffeine_pid=$!
        open -a "Macs Fan Control"
    fi

    # Determine audio codec settings for single file mode
    if [ "$reencode_opus" = "true" ]; then
        current_audio_codec=$(get_audio_codec "$input_file")
        if [ "$current_audio_codec" = "opus" ]; then
            audio_setting="-c:a copy"
            echo "Converting: $input_file -> $output_file (keeping existing Opus audio)"
        else
            audio_setting="-c:a libopus"
            echo "Converting: $input_file -> $output_file (reencoding audio to Opus)"
        fi
    else
        audio_setting="-c:a copy"
        echo "Converting: $input_file -> $output_file (copying audio)"
    fi

    ffmpeg -i "$input_file" -c:v libx265 $audio_setting "$output_file"

    if [[ "$(uname)" == "Darwin" ]]; then
        osascript -e 'quit app "Macs Fan Control"'
        kill $caffeine_pid 2>/dev/null
    fi

    exit 0
fi

# Directory mode - no arguments provided
if [ $# -eq 0 ]; then
    echo "Scanning current directory for video files..."

    # Find .mp4 and .mkv files in current directory only (not subdirectories)
    files=(*.mp4 *.mkv)

    # Filter out patterns that don't match actual files
    video_files=()
    for file in "${files[@]}"; do
        if [ -f "$file" ]; then
            video_files+=("$file")
        fi
    done

    # Check if any video files were found
    if [ ${#video_files[@]} -eq 0 ]; then
        echo "No .mp4 or .mkv files found in the current directory."
        exit 0
    fi

    echo "Found the following video files:"
    for file in "${video_files[@]}"; do
        echo "  - $file"
    done

    echo
    read -p "Do you want to proceed with converting these files? (y/N): " response

    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        echo "Operation cancelled."
        exit 0
    fi

    # Create output directory
    output_dir="output"
    if [ ! -d "$output_dir" ]; then
        echo "Creating output directory: $output_dir"
        mkdir -p "$output_dir"
    fi

    # Start macOS-specific power management
    if [[ "$(uname)" == "Darwin" ]]; then
        caffeinate -d &
        caffeine_pid=$!
        open -a "Macs Fan Control"
    fi

    # Convert each file
    echo "Starting conversion of ${#video_files[@]} files..."
    for file in "${video_files[@]}"; do
        convert_file "$file" "$output_dir" "$reencode_opus"
    done

    # Stop macOS-specific power management
    if [[ "$(uname)" == "Darwin" ]]; then
        osascript -e 'quit app "Macs Fan Control"'
        kill $caffeine_pid 2>/dev/null
    fi

    echo "Conversion complete! Output files are in the '$output_dir' directory."
    exit 0
fi

# If we reach here, it means too many arguments or invalid usage
echo "Usage: $0 [--opus] [input_file]"
echo "  With no file argument: Converts all .mp4 and .mkv files in current directory"
echo "  With one file argument: Converts the specified video file"
echo "  --opus: Reencode audio to Opus (default: copy existing audio)"
echo "  Converts video to H.265/HEVC"
exit 1
